version: "3.1"
services:
  poc-st-openbao:
    image: quay.io/openbao/openbao:2.2.2
    environment:
      BAO_DEV_ROOT_TOKEN_ID: dev-root-token
      OPENBAO_SKIP_VERIFY: "true"
    volumes:
      - ./poc-st-openbao/config.hcl:/openbao/config/config.hcl
    ports:
      - 8200:8200
  poc-st-app-storage:
    image: postgres:17.5
    volumes:
      - "poc-st-app-pg-data:/var/lib/postgresql/data/pgdata"
    restart: always
    environment:
      POSTGRES_PASSWORD: posgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
  poc-st-keycloak-storage:
    image: postgres:17.5
    volumes:
      - "poc-st-keycloak-pg-data:/var/lib/postgresql/data"
    environment:
      POSTGRES_DB: keycloak_db
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - 5433:5433
  poc-st-keycloak:
    image: quay.io/keycloak/keycloak:26.2.5
    # image: keycloak-with-spi:1.0.0
    depends_on:
      - poc-st-keycloak-storage
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "false"
      KC_LOG_LEVEL: info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://poc-st-keycloak-storage/keycloak_db
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_METRICS_ENABLED: "true"
      # DEBUG: 'true'
      # DEBUG_PORT: '*:8787'
      federation_endpoint: http://MYIPADDRESS:8080/poc-st/api/v1/spi/user
      federation_user: admin
      federation_pass: admin
      kafka_consumer_topic: audit_events
      kafka_consumer_bootstrap_servers: "poc-st-kafka:19092"
      kafka_consumer_group_id: keycloak-kafka-consumer
      kafka_consumer_schema_registry_url: "http://poc-st-schema-registry:8085"
      vault-address: "http://poc-st-openbao:8200"
      vault-token: "dev-root-token"
      vault-path: "dev-secrets"
      vault-secrets: "creds"
    volumes:
      - ./poc-realms:/opt/keycloak/data/import
      - ./poc-providers:/opt/keycloak/providers
      - ./poc-libs/kafka-clients-3.9.0.jar:/opt/keycloak/lib/lib/main/kafka-clients-3.9.0.jar
    # command: ["--debug","start-dev","--import-realm", "--http-port", "7080", "--https-port", "7443","--log-level=DEBUG","-Djdk.httpclient.HttpClient.log=all"]
    command: ["start-dev", "--import-realm", "--http-port", "7080", "--https-port", "7443"]
    ports:
      - "7080:7080"
      - "7443:7443"
      - "9000:9000"
      - "8787:8787"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15
  poc-st-akhq:
    image: tchiotludo/akhq:0.25.1
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "poc-st-kafka:19092"
              schema-registry:
                url: "http://poc-st-schema-registry:8085"
    ports:
      - 8086:8080
    links:
      - poc-st-kafka
      - poc-st-schema-registry
  poc-st-zookeeper:
    image: confluentinc/cp-zookeeper:7.9.1
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
      - "8087:8080"
    volumes:
      - poc-zookeeper-data:/var/lib/zookeeper/data:Z
      - poc-zookeeper-log:/var/lib/zookeeper/log:Z
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_ADMIN_ENABLE_SERVER: "false"
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: poc-st-zookeeper:2888:3888
  poc-st-kafka:
    image: confluentinc/cp-kafka:7.9.1
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    volumes:
      - poc-st-kafka-data:/var/lib/kafka/data:Z
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://poc-st-kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "poc-st-zookeeper:2181"
      KAFKA_BROKER_ID: 0
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
      interval: 10s
      retries: 20
    links:
      - poc-st-zookeeper
  poc-st-schema-registry:
    image: confluentinc/cp-schema-registry:7.9.1
    restart: unless-stopped
    ports:
      - "8085:8085"
    depends_on:
      - poc-st-kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://poc-st-kafka:19092"
      SCHEMA_REGISTRY_HOST_NAME: "poc-st-schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
volumes:
  poc-st-app-pg-data:
    driver: local
  poc-st-keycloak-pg-data:
    driver: local
  poc-zookeeper-data:
    driver: local
  poc-zookeeper-log:
    driver: local
  poc-st-kafka-data:
    driver: local
  poc-realms:
    driver: local
  poc-providers:
    driver: local
  poc-keycloak-scripts:
    driver: local
  poc-st-init-openbao:
    driver: local
