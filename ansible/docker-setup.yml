# code: language=ansible
---
- name: OpenBao Configuration
  hosts: localhost
  any_errors_fatal: true
  tasks:
    - name: Get ipv4 address
      ansible.builtin.debug:
        var: hostvars[inventory_hostname]['ansible_default_ipv4']['address']
    - name: "OpenBao - Is running"
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8200/v1/sys/mounts"
        headers:
          X-Vault-Token: "{{ hostvars[inventory_hostname]['openbao_token'] }}"
          status_code: "200"
    - name: "OpenBao - Setup key value storage v2"
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8200/v1/sys/mounts/{{ hostvars[inventory_hostname]['openbao_secrets_path'] }}"
        method: POST
        headers:
          X-Vault-Token: "{{ hostvars[inventory_hostname]['openbao_token'] }}"
        body: "{\"type\":\"kv-v2\"}"
        body_format: json
        status_code: [200,400]
      register: response
    - name: "OpenBao - Key Value Storage - Fail if not 200 or 400 with error 'path is already in use'"
      fail:
        msg: "Request failed with status code {{ response.status }} and message: {{ response.msg }}"
      when:
        - response.status != 200
        - not (response.status == 400 and response.json.errors is search("path is already in use"))
    - name: "OpenBao - Cipher key"
      ansible.builtin.uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8200/v1/{{ hostvars[inventory_hostname]['openbao_secrets_path'] }}/data/{{ hostvars[inventory_hostname]['openbao_secrets_creds'] }}"
        method: PUT
        body: "{ \"options\": {\"cas\": 0}, \"data\": {\"cipherKey\": \"{{ hostvars[inventory_hostname]['openbao_cipher_key'] }}\"} }"
        body_format: json
        status_code: [200,400]
        headers:
          X-Vault-Token: "{{ hostvars[inventory_hostname]['openbao_token'] }}"
      register: response
    - name: "OpenBao - Cipher Key - Fail if not 200 or 400 with error 'check-and-set parameter did not match the current version'"
      fail:
        msg: "Request failed with status code {{ response.status }} and message: {{ response.msg }}"
      when:
        - response.status != 200
        - not (response.status == 400 and response.json.errors is search("check-and-set parameter did not match the current version"))
    - name: "Kafka - List topics"
      community.docker.docker_container_exec:
        container: docker_poc-st-kafka_1
        command: /bin/bash -c "kafka-topics --bootstrap-server {{ hostvars[inventory_hostname]['kafka_container_internal'] }} --list"
      register: kafka_output
    - name: "Kafka - Topics - List"
      set_fact:
        topics: "{{ kafka_output.stdout | split('\n') }}"
    - name: "Kafka - List Topics Result"
      ansible.builtin.debug:
        var: topics
    - name: "Kafka - Create topics"
      vars:
        topicName: "{{ hostvars[inventory_hostname]['kafka_audit_topic'] }}"
      when: not (topics is contains(topicName))
      community.docker.docker_container_exec:
        container: "{{ hostvars[inventory_hostname]['kafka_container_external'] }}"
        command: /bin/bash -c "kafka-topics --bootstrap-server {{ hostvars[inventory_hostname]['kafka_container_internal'] }} --create --if-not-exists --topic {{ topicName }} --replication-factor 1 --partitions 2"
      register: kafka_output
